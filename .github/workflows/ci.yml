name: Docker Image CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build Docker images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - repo: vladgh/testautobuildhooks
            path: testpath
            platform: linux/amd64
            version: '1.5.11'
          # - repo: vladgh/apache
          #   path: apache
          #   platform: linux/386,linux/amd64
          #   token: 1LIUNGTtioEcpHJoQZzwK3qQPhE=
          #   version: '0.4.0'
          # - repo: vladgh/awscli
          #   path: awscli
          #   platform: linux/386,linux/amd64
          #   token: mbMppUV6he_zmIGik-MeJ22K8a0=
          #   version: '0.4.0'
          # - repo: vladgh/backup
          #   path: backup
          #   platform: linux/386,linux/amd64
          #   token: ZjbRHMtrAhl9V2MWjWmOR0KWlGc=
          #   version: '0.4.0'
          # - repo: vladgh/deluge
          #   path: deluge
          #   platform: linux/386,linux/amd64
          #   token: BvOV7ec7tt2N207sgMKqFrGzSxs=
          #   version: '0.4.0'
          # - repo: vladgh/fpm
          #   path: fpm
          #   platform: linux/386,linux/amd64
          #   token: OG17Glgq8CvSRFJjkK5vdC_pn_A=
          #   version: '0.4.0'
          # - repo: vladgh/gpg
          #   path: gpg
          #   platform: linux/386,linux/amd64
          #   token: Sg_CkaULmDjZ0K3u5W1mIqXlkOk=
          #   version: '0.4.0'
          # - repo: vladgh/minidlna
          #   path: minidlna
          #   platform: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8
          #   token: Qr9rUtKpdDGoUVh3tGwGTBzSmQ8=
          #   version: '0.4.0'
          # - repo: vladgh/puppet
          #   path: puppet
          #   platform: linux/386,linux/amd64
          #   token: uj5nZE_tFQ3DyNFvERhnamfJbis=
          #   version: '0.4.0'
          # - repo: vladgh/puppetboard
          #   path: puppetboard
          #   platform: linux/386,linux/amd64
          #   token: hS1FQBmTy1gQvGTzzBbGVkeGEYs=
          #   version: '0.4.0'
          # - repo: vladgh/puppetdb
          #   path: puppetdb
          #   platform: linux/386,linux/amd64
          #   token: eLBcOfMSKHB7seTlBGvZD8VjK4A=
          #   version: '0.4.0'
          # - repo: vladgh/puppetserver
          #   path: puppetserver
          #   platform: linux/386,linux/amd64
          #   token: Z8Ruox6vyG737HPGY6VKyeuL5qU=
          #   version: '0.4.0'
          # - repo: vladgh/puppetserverdb
          #   path: puppetserverdb
          #   platform: linux/386,linux/amd64
          #   token: 8d7IFiC0YkD1xJinK5UtgkQ88V0=
          #   version: '0.4.0'
          # - repo: vladgh/r10k
          #   path: r10k
          #   platform: linux/386,linux/amd64
          #   token: OvMmZQPNL_0s5G-CYxrRmNFMDxE=
          #   version: '0.4.0'
          # - repo: vladgh/s3sync
          #   path: s3sync
          #   platform: linux/386,linux/amd64
          #   token: eB40MYq66N9GQvIisktwJVOL_tw=
          #   version: '0.4.0'
          # - repo: vladgh/webhook
          #   path: webhook
          #   platform: linux/386,linux/amd64
          #   token: tRhT7nPREdQwptZxaMHDTgrazYY=
          #   version: '0.4.0'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Set VARs
        run: |
          echo ::set-env name=GIT_TAG::"$(git describe --always --tags)"
          echo ::set-env name=VERSION::"${{ matrix.image.version }}"
          echo ::set-env name=DOCKER_REPO::"${{ matrix.image.repo }}"
          echo ::set-env name=DOCKER_PLATFORM::"${{ matrix.image.platform }}"
          echo ::set-env name=DOCKER_BUILD_PATH::"${{ matrix.image.path }}"
          echo ::set-env name=MICROBADGER_TOKEN::"${{ matrix.image.token }}"
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: latest
          qemu-version: latest
      # - name: Build the image with git tag version
      #   run: |
      #     export DOCKER_TAGS="--tag ${DOCKER_REPO}:latest --tag ${DOCKER_REPO}:${GIT_TAG}"

      #     if [[ "$GIT_TAG" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
      #       semver="${GIT_TAG#v}" # Remove the 'v' prefix
      #       semver="${semver%%-*}" # Remove the commit number
      #       IFS="." read -r -a semver <<< "$semver" # Create an array with version numbers

      #       export major="${semver[0]}" minor="${semver[1]}" patch="${semver[2]}"
      #       for version in "${major}.${minor}.${patch}" "${major}.${minor}" "${major}"; do
      #         export DOCKER_TAGS="${DOCKER_TAGS} --tag ${DOCKER_REPO}:${version}"
      #       done
      #     fi

      #     eval docker buildx build --rm --pull --push \
      #       --platform "${DOCKER_PLATFORM}" \
      #       --build-arg VERSION="$GIT_TAG" \
      #       --build-arg VCS_URL="$(git config --get remote.origin.url)" \
      #       --build-arg VCS_REF="$(git rev-parse --short HEAD)" \
      #       --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
      #       "${DOCKER_TAGS}" "${DOCKER_BUILD_PATH}"
      - name: Build the image with specified version
        run: |
          export DOCKER_TAGS="--tag ${DOCKER_REPO}:latest --tag ${DOCKER_REPO}:${GIT_TAG}"

          TOKEN=$( curl -sSLd "username=${{ secrets.DOCKER_USERNAME }}&password=${{ secrets.DOCKER_PASSWORD }}" https://hub.docker.com/v2/users/login | jq -r ".token" )

          if ! curl --fail --silent --header "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/${DOCKER_REPO}/tags/${VERSION}/" >/dev/null; then
            IFS="." read -r -a semver <<< "$VERSION"
            export major="${semver[0]}" minor="${semver[1]}" patch="${semver[2]}"
            for version in "${major}.${minor}.${patch}" "${major}.${minor}" "${major}"; do
              export DOCKER_TAGS="${DOCKER_TAGS} --tag ${DOCKER_REPO}:${version}"
            done
          fi

          eval docker buildx build --rm --pull --push \
            --build-arg VERSION="$GIT_TAG" \
            --build-arg VCS_URL="$(git config --get remote.origin.url)" \
            --build-arg VCS_REF="$(git rev-parse --short HEAD)" \
            --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --platform "${DOCKER_PLATFORM}" \
            "${DOCKER_TAGS}" \
            "${DOCKER_BUILD_PATH}"
      - name: Notify MicroBadger
        run: |
          if [[ -n "$MICROBADGER_TOKEN" ]]; then
            curl --request POST --silent --fail "https://hooks.microbadger.com/images/${DOCKER_REPO}/${MICROBADGER_TOKEN}"
          fi
